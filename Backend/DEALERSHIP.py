{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "72668606",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Make</th>\n",
       "      <th>Brand</th>\n",
       "      <th>Mileatex</th>\n",
       "      <th>Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Toyota</td>\n",
       "      <td>Corolla</td>\n",
       "      <td>150000</td>\n",
       "      <td>10000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Honda</td>\n",
       "      <td>Civic</td>\n",
       "      <td>120000</td>\n",
       "      <td>8000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Ford</td>\n",
       "      <td>Fusion</td>\n",
       "      <td>130000</td>\n",
       "      <td>9000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Chevrolet</td>\n",
       "      <td>Malibu</td>\n",
       "      <td>140000</td>\n",
       "      <td>8500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Hyundai</td>\n",
       "      <td>Elantra</td>\n",
       "      <td>125000</td>\n",
       "      <td>7000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Nissan</td>\n",
       "      <td>Altima</td>\n",
       "      <td>135000</td>\n",
       "      <td>8200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Subaru</td>\n",
       "      <td>Forester</td>\n",
       "      <td>145000</td>\n",
       "      <td>9500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>BMW</td>\n",
       "      <td>3 Series</td>\n",
       "      <td>150000</td>\n",
       "      <td>12000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Audi</td>\n",
       "      <td>A4</td>\n",
       "      <td>160000</td>\n",
       "      <td>11000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Mercedes-Benz</td>\n",
       "      <td>C-Class</td>\n",
       "      <td>170000</td>\n",
       "      <td>13000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Volkswagen</td>\n",
       "      <td>Golf</td>\n",
       "      <td>120000</td>\n",
       "      <td>8000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Fiat</td>\n",
       "      <td>500</td>\n",
       "      <td>100000</td>\n",
       "      <td>6000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Mazda</td>\n",
       "      <td>CX-5</td>\n",
       "      <td>130000</td>\n",
       "      <td>9000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Kia</td>\n",
       "      <td>Optima</td>\n",
       "      <td>140000</td>\n",
       "      <td>8500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Jeep</td>\n",
       "      <td>Cherokee</td>\n",
       "      <td>150000</td>\n",
       "      <td>10000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Chrysler</td>\n",
       "      <td>Pacifica</td>\n",
       "      <td>125000</td>\n",
       "      <td>7000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Dodge</td>\n",
       "      <td>Charger</td>\n",
       "      <td>135000</td>\n",
       "      <td>8200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Hyundai</td>\n",
       "      <td>Sonata</td>\n",
       "      <td>145000</td>\n",
       "      <td>9500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Toyota</td>\n",
       "      <td>Camry</td>\n",
       "      <td>150000</td>\n",
       "      <td>12000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Honda</td>\n",
       "      <td>Accord</td>\n",
       "      <td>160000</td>\n",
       "      <td>11000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Ford</td>\n",
       "      <td>Mustang</td>\n",
       "      <td>170000</td>\n",
       "      <td>13000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Chevrolet</td>\n",
       "      <td>Impala</td>\n",
       "      <td>120000</td>\n",
       "      <td>8000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>Hyundai</td>\n",
       "      <td>Santa Fe</td>\n",
       "      <td>130000</td>\n",
       "      <td>9000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>Nissan</td>\n",
       "      <td>Sentra</td>\n",
       "      <td>140000</td>\n",
       "      <td>8500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>Subaru</td>\n",
       "      <td>Outback</td>\n",
       "      <td>125000</td>\n",
       "      <td>7000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>BMW</td>\n",
       "      <td>X3</td>\n",
       "      <td>135000</td>\n",
       "      <td>8200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Audi</td>\n",
       "      <td>Q7</td>\n",
       "      <td>145000</td>\n",
       "      <td>9500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>Mercedes-Benz</td>\n",
       "      <td>GLC</td>\n",
       "      <td>150000</td>\n",
       "      <td>10000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Make     Brand  Mileatex  Price\n",
       "0          Toyota   Corolla    150000  10000\n",
       "1           Honda     Civic    120000   8000\n",
       "2            Ford    Fusion    130000   9000\n",
       "3       Chevrolet    Malibu    140000   8500\n",
       "4         Hyundai   Elantra    125000   7000\n",
       "5          Nissan    Altima    135000   8200\n",
       "6          Subaru  Forester    145000   9500\n",
       "7             BMW  3 Series    150000  12000\n",
       "8            Audi        A4    160000  11000\n",
       "9   Mercedes-Benz   C-Class    170000  13000\n",
       "10     Volkswagen      Golf    120000   8000\n",
       "11           Fiat       500    100000   6000\n",
       "12          Mazda      CX-5    130000   9000\n",
       "13            Kia    Optima    140000   8500\n",
       "14           Jeep  Cherokee    150000  10000\n",
       "15       Chrysler  Pacifica    125000   7000\n",
       "16          Dodge   Charger    135000   8200\n",
       "17        Hyundai    Sonata    145000   9500\n",
       "18         Toyota     Camry    150000  12000\n",
       "19          Honda    Accord    160000  11000\n",
       "20           Ford   Mustang    170000  13000\n",
       "21      Chevrolet    Impala    120000   8000\n",
       "22        Hyundai  Santa Fe    130000   9000\n",
       "23         Nissan    Sentra    140000   8500\n",
       "24         Subaru   Outback    125000   7000\n",
       "25            BMW        X3    135000   8200\n",
       "26           Audi        Q7    145000   9500\n",
       "27  Mercedes-Benz       GLC    150000  10000"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "\n",
    "df = pd.read_csv(\"cars.csv\")\n",
    "\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0e8e82a8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Make</th>\n",
       "      <th>Brand</th>\n",
       "      <th>Mileatex</th>\n",
       "      <th>Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Toyota</td>\n",
       "      <td>Corolla</td>\n",
       "      <td>150000</td>\n",
       "      <td>10000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Honda</td>\n",
       "      <td>Civic</td>\n",
       "      <td>120000</td>\n",
       "      <td>8000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Ford</td>\n",
       "      <td>Fusion</td>\n",
       "      <td>130000</td>\n",
       "      <td>9000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Chevrolet</td>\n",
       "      <td>Malibu</td>\n",
       "      <td>140000</td>\n",
       "      <td>8500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Hyundai</td>\n",
       "      <td>Elantra</td>\n",
       "      <td>125000</td>\n",
       "      <td>7000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Make    Brand  Mileatex  Price\n",
       "0     Toyota  Corolla    150000  10000\n",
       "1      Honda    Civic    120000   8000\n",
       "2       Ford   Fusion    130000   9000\n",
       "3  Chevrolet   Malibu    140000   8500\n",
       "4    Hyundai  Elantra    125000   7000"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "f6eabf9d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dealership\n"
     ]
    },
    {
     "ename": "KeyError",
     "evalue": "'Mileage'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "File \u001b[1;32mC:\\ProgramData\\anaconda3\\lib\\site-packages\\pandas\\core\\indexes\\base.py:3802\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[1;34m(self, key, method, tolerance)\u001b[0m\n\u001b[0;32m   3801\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m-> 3802\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_engine\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_loc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mcasted_key\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m   3803\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n",
      "File \u001b[1;32mC:\\ProgramData\\anaconda3\\lib\\site-packages\\pandas\\_libs\\index.pyx:138\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[1;34m()\u001b[0m\n",
      "File \u001b[1;32mC:\\ProgramData\\anaconda3\\lib\\site-packages\\pandas\\_libs\\index.pyx:165\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[1;34m()\u001b[0m\n",
      "File \u001b[1;32mpandas\\_libs\\hashtable_class_helper.pxi:5745\u001b[0m, in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[1;34m()\u001b[0m\n",
      "File \u001b[1;32mpandas\\_libs\\hashtable_class_helper.pxi:5753\u001b[0m, in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;31mKeyError\u001b[0m: 'Mileage'",
      "\nThe above exception was the direct cause of the following exception:\n",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[16], line 58\u001b[0m\n\u001b[0;32m     51\u001b[0m             \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mCode failed\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m     56\u001b[0m trying \u001b[38;5;241m=\u001b[39m Dealership()\n\u001b[1;32m---> 58\u001b[0m search_alg \u001b[38;5;241m=\u001b[39m \u001b[43mSearchingAlg\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdf\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m     60\u001b[0m user_in \u001b[38;5;241m=\u001b[39m \u001b[38;5;28minput\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124menter the brand: \u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m     62\u001b[0m searching_alg\u001b[38;5;241m.\u001b[39muser_input(user_in)\n",
      "Cell \u001b[1;32mIn[16], line 20\u001b[0m, in \u001b[0;36mSearchingAlg.__init__\u001b[1;34m(self, df)\u001b[0m\n\u001b[0;32m     18\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mmake \u001b[38;5;241m=\u001b[39m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mMake\u001b[39m\u001b[38;5;124m'\u001b[39m]\n\u001b[0;32m     19\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mbrand \u001b[38;5;241m=\u001b[39m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mBrand\u001b[39m\u001b[38;5;124m'\u001b[39m]\n\u001b[1;32m---> 20\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mmile \u001b[38;5;241m=\u001b[39m \u001b[43mdf\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mMileage\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m\n\u001b[0;32m     21\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mprice \u001b[38;5;241m=\u001b[39m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mPrice\u001b[39m\u001b[38;5;124m'\u001b[39m]\n",
      "File \u001b[1;32mC:\\ProgramData\\anaconda3\\lib\\site-packages\\pandas\\core\\frame.py:3807\u001b[0m, in \u001b[0;36mDataFrame.__getitem__\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m   3805\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcolumns\u001b[38;5;241m.\u001b[39mnlevels \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[0;32m   3806\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_getitem_multilevel(key)\n\u001b[1;32m-> 3807\u001b[0m indexer \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcolumns\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_loc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m   3808\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_integer(indexer):\n\u001b[0;32m   3809\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m [indexer]\n",
      "File \u001b[1;32mC:\\ProgramData\\anaconda3\\lib\\site-packages\\pandas\\core\\indexes\\base.py:3804\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[1;34m(self, key, method, tolerance)\u001b[0m\n\u001b[0;32m   3802\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_engine\u001b[38;5;241m.\u001b[39mget_loc(casted_key)\n\u001b[0;32m   3803\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n\u001b[1;32m-> 3804\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(key) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01merr\u001b[39;00m\n\u001b[0;32m   3805\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m:\n\u001b[0;32m   3806\u001b[0m     \u001b[38;5;66;03m# If we have a listlike key, _check_indexing_error will raise\u001b[39;00m\n\u001b[0;32m   3807\u001b[0m     \u001b[38;5;66;03m#  InvalidIndexError. Otherwise we fall through and re-raise\u001b[39;00m\n\u001b[0;32m   3808\u001b[0m     \u001b[38;5;66;03m#  the TypeError.\u001b[39;00m\n\u001b[0;32m   3809\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_check_indexing_error(key)\n",
      "\u001b[1;31mKeyError\u001b[0m: 'Mileage'"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "df = pd.read_csv(\"cars.csv\")\n",
    "\n",
    "class Dealership:\n",
    "    \n",
    "    def __init__(self):\n",
    "        \n",
    "        self.title = 'Dealership'\n",
    "        \n",
    "        print(self.title)\n",
    "        \n",
    "\n",
    "class SearchingAlg:\n",
    "    \n",
    "    def __init__(self, df):\n",
    "        self.df = df\n",
    "        self.make = df['Make']\n",
    "        self.brand = df['Brand']\n",
    "        self.mile = df['Mileage']\n",
    "        self.price = df['Price']\n",
    "    \n",
    "    def user_input(self, geo):\n",
    "        \n",
    "        print(\"what are you searching for\")\n",
    "        \n",
    "        geo = input(\"enter the make of the car: \").lower()\n",
    "        \n",
    "        \n",
    "        matching_rows = self.df[self.df['Make'].str.contains(geo)]\n",
    "        \n",
    "        if len(matching_rows) > 0:\n",
    "            makes = matching_rows['Make'].unique()\n",
    "            \n",
    "            if len(makes) ==1:\n",
    "                make = makes[0]\n",
    "                \n",
    "                brands = matching_rows[matching_rows['Make']==make]['Brand'].unique()\n",
    "                \n",
    "                print(f\"The brands available for {make} are:\")\n",
    "                \n",
    "                print(\", \".join(brands.tolist()))\n",
    "\n",
    "            else:\n",
    "                print(\"Please specify the make: \")\n",
    "                \n",
    "                for make in makes:\n",
    "                    print(make)\n",
    "                    \n",
    "        else:\n",
    "            print(\"Code failed\")\n",
    "                    \n",
    "                \n",
    "                \n",
    "                \n",
    "trying = Dealership()\n",
    "\n",
    "search_alg = SearchingAlg(df)\n",
    "\n",
    "user_in = input(\"enter the brand: \")\n",
    "\n",
    "searching_alg.user_input(user_in)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "8518b2fa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dealership\n"
     ]
    },
    {
     "ename": "KeyError",
     "evalue": "'Mileage'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "File \u001b[1;32mC:\\ProgramData\\anaconda3\\lib\\site-packages\\pandas\\core\\indexes\\base.py:3802\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[1;34m(self, key, method, tolerance)\u001b[0m\n\u001b[0;32m   3801\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m-> 3802\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_engine\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_loc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mcasted_key\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m   3803\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n",
      "File \u001b[1;32mC:\\ProgramData\\anaconda3\\lib\\site-packages\\pandas\\_libs\\index.pyx:138\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[1;34m()\u001b[0m\n",
      "File \u001b[1;32mC:\\ProgramData\\anaconda3\\lib\\site-packages\\pandas\\_libs\\index.pyx:165\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[1;34m()\u001b[0m\n",
      "File \u001b[1;32mpandas\\_libs\\hashtable_class_helper.pxi:5745\u001b[0m, in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[1;34m()\u001b[0m\n",
      "File \u001b[1;32mpandas\\_libs\\hashtable_class_helper.pxi:5753\u001b[0m, in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;31mKeyError\u001b[0m: 'Mileage'",
      "\nThe above exception was the direct cause of the following exception:\n",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[17], line 56\u001b[0m\n\u001b[0;32m     52\u001b[0m             \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mCode failed\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m     54\u001b[0m trying \u001b[38;5;241m=\u001b[39m Dealership(df)\n\u001b[1;32m---> 56\u001b[0m search_alg \u001b[38;5;241m=\u001b[39m \u001b[43mSearchingAlg\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdf\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m     58\u001b[0m user_in \u001b[38;5;241m=\u001b[39m \u001b[38;5;28minput\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124menter the make of the car: \u001b[39m\u001b[38;5;124m\"\u001b[39m)\u001b[38;5;241m.\u001b[39mlower()\n\u001b[0;32m     60\u001b[0m search_alg\u001b[38;5;241m.\u001b[39muser_input(user_in)\n",
      "Cell \u001b[1;32mIn[17], line 21\u001b[0m, in \u001b[0;36mSearchingAlg.__init__\u001b[1;34m(self, df)\u001b[0m\n\u001b[0;32m     19\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mmake \u001b[38;5;241m=\u001b[39m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mMake\u001b[39m\u001b[38;5;124m'\u001b[39m]\n\u001b[0;32m     20\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mbrand \u001b[38;5;241m=\u001b[39m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mBrand\u001b[39m\u001b[38;5;124m'\u001b[39m]\n\u001b[1;32m---> 21\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mmile \u001b[38;5;241m=\u001b[39m \u001b[43mdf\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mMileage\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m\n\u001b[0;32m     22\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mprice \u001b[38;5;241m=\u001b[39m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mPrice\u001b[39m\u001b[38;5;124m'\u001b[39m]\n",
      "File \u001b[1;32mC:\\ProgramData\\anaconda3\\lib\\site-packages\\pandas\\core\\frame.py:3807\u001b[0m, in \u001b[0;36mDataFrame.__getitem__\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m   3805\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcolumns\u001b[38;5;241m.\u001b[39mnlevels \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[0;32m   3806\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_getitem_multilevel(key)\n\u001b[1;32m-> 3807\u001b[0m indexer \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcolumns\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_loc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m   3808\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_integer(indexer):\n\u001b[0;32m   3809\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m [indexer]\n",
      "File \u001b[1;32mC:\\ProgramData\\anaconda3\\lib\\site-packages\\pandas\\core\\indexes\\base.py:3804\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[1;34m(self, key, method, tolerance)\u001b[0m\n\u001b[0;32m   3802\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_engine\u001b[38;5;241m.\u001b[39mget_loc(casted_key)\n\u001b[0;32m   3803\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n\u001b[1;32m-> 3804\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(key) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01merr\u001b[39;00m\n\u001b[0;32m   3805\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m:\n\u001b[0;32m   3806\u001b[0m     \u001b[38;5;66;03m# If we have a listlike key, _check_indexing_error will raise\u001b[39;00m\n\u001b[0;32m   3807\u001b[0m     \u001b[38;5;66;03m#  InvalidIndexError. Otherwise we fall through and re-raise\u001b[39;00m\n\u001b[0;32m   3808\u001b[0m     \u001b[38;5;66;03m#  the TypeError.\u001b[39;00m\n\u001b[0;32m   3809\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_check_indexing_error(key)\n",
      "\u001b[1;31mKeyError\u001b[0m: 'Mileage'"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "df = pd.read_csv(\"cars.csv\")\n",
    "\n",
    "class Dealership:\n",
    "    \n",
    "    def __init__(self, df):\n",
    "        \n",
    "        self.title = 'Dealership'\n",
    "        self.df = df\n",
    "        \n",
    "        print(self.title)\n",
    "        \n",
    "\n",
    "class SearchingAlg:\n",
    "    \n",
    "    def __init__(self, df):\n",
    "        self.df = df\n",
    "        self.make = df['Make']\n",
    "        self.brand = df['Brand']\n",
    "        self.mile = df['Mileage']\n",
    "        self.price = df['Price']\n",
    "    \n",
    "    def user_input(self, geo):\n",
    "        \n",
    "        print(\"what are you searching for\")\n",
    "        \n",
    "        geo = input(\"enter the make of the car: \").lower()\n",
    "        \n",
    "        \n",
    "        matching_rows = self.df[self.df['Make'].str.contains(geo)]\n",
    "        \n",
    "        if len(matching_rows) > 0:\n",
    "            makes = matching_rows['Make'].unique()\n",
    "            \n",
    "            if len(makes) ==1:\n",
    "                make = makes[0]\n",
    "                \n",
    "                brands = matching_rows[matching_rows['Make']==make]['Brand'].unique()\n",
    "                \n",
    "                print(f\"The brands available for {make} are:\")\n",
    "                \n",
    "                print(\", \".join(brands.tolist()))\n",
    "\n",
    "            else:\n",
    "                print(\"Please specify the make: \")\n",
    "                \n",
    "                for make in makes:\n",
    "                    print(make)\n",
    "                    \n",
    "        else:\n",
    "            print(\"Code failed\")\n",
    "\n",
    "trying = Dealership(df)\n",
    "\n",
    "search_alg = SearchingAlg(df)\n",
    "\n",
    "user_in = input(\"enter the make of the car: \").lower()\n",
    "\n",
    "search_alg.user_input(user_in)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b9aa09ea",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dealership \n",
      "\n",
      "What are you searching for?\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the make of the car:  nissan\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The brands available for Nissan are:\n",
      "Altima, Sentra\n",
      "Choose a brand:\n",
      "1. A\n",
      "2. l\n",
      "3. t\n",
      "4. i\n",
      "5. m\n",
      "6. a\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the number corresponding to your choice:  2\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Brand information not found.\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Assuming cars.csv is in the same directory and has the correct structure\n",
    "df = pd.read_csv(\"cars.csv\")\n",
    "\n",
    "class Dealership:\n",
    "    def __init__(self, df):\n",
    "        self.title = 'Dealership \\n'\n",
    "        self.df = df\n",
    "        print(self.title)\n",
    "\n",
    "class SearchingAlg:\n",
    "    def __init__(self, df):\n",
    "        self.df = df\n",
    "        self.make = df['Make']\n",
    "        self.brand = df['Brand']\n",
    "        self.mileage = df['Mileatex'] # Corrected column name\n",
    "        self.price = df['Price']\n",
    "    \n",
    "    def user_input(self):\n",
    "        print(\"What are you searching for?\")\n",
    "        geo = input(\"Enter the make of the car: \").lower()\n",
    "        \n",
    "        matching_rows = self.df[self.df['Make'].str.contains(geo, case = False)]\n",
    "        \n",
    "        if len(matching_rows) > 0:\n",
    "            makes = matching_rows['Make'].unique()\n",
    "            \n",
    "            if len(makes) == 1:\n",
    "                make = makes[0]\n",
    "                brands = matching_rows[matching_rows['Make'] == make]['Brand'].unique()\n",
    "                print(f\"The brands available for {make} are:\")\n",
    "                print(\", \".join(brands.tolist()))\n",
    "                \n",
    "                self.select_brand(make,brands[0])\n",
    "            else:\n",
    "                print(\"Please specify the make:\")\n",
    "                for make in makes:\n",
    "                    print(make)\n",
    "        else:\n",
    "            print(\"No matches found for the entered make.\")\n",
    "    \n",
    "    \n",
    "    def select_brand(self, make, brands):\n",
    "        print(\"Choose a brand:\")\n",
    "        for index, brand in enumerate(brands):\n",
    "            print(f\"{index + 1}. {brand}\")\n",
    "        \n",
    "        choice = input(\"Enter the number corresponding to your choice: \")\n",
    "        try:\n",
    "            choice_index = int(choice) - 1\n",
    "            if 0 <= choice_index < len(brands):\n",
    "                selected_brand = brands[choice_index]\n",
    "                brand_info = self.df[(self.df['Make'] == make) & (self.df['Brand'] == selected_brand)]\n",
    "                if not brand_info.empty:\n",
    "                    print(f\"Price: {brand_info['Price'].values[0]}\")\n",
    "                    print(f\"Mileage at which it becomes too expensive: {brand_info['Mileatex'].values[0]}\")\n",
    "                else:\n",
    "                    print(\"Brand information not found.\")\n",
    "            else:\n",
    "                print(\"Invalid choice.\")\n",
    "        except ValueError:\n",
    "            print(\"Invalid input. Please enter a number.\")\n",
    "# Create instances of the classes\n",
    "trying = Dealership(df)\n",
    "search_alg = SearchingAlg(df)\n",
    "\n",
    "# Call the user_input method\n",
    "search_alg.user_input()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ae3c5612-f827-4e5c-860a-f25e4bb214c5",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (1150285731.py, line 45)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[10], line 45\u001b[1;36m\u001b[0m\n\u001b[1;33m    Create instances of the classes\u001b[0m\n\u001b[1;37m           ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "18d18e58-46a4-4809-bf00-af2d5b6d1546",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dealership \n",
      "\n",
      "What are you searching for?\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the make of the car:  honda\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The brands available for Honda are:\n",
      "Civic, Accord\n",
      "Choose a brand:\n",
      "1. Civic\n",
      "2. Accord\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the number corresponding to your choice:  2\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Price: 11000\n",
      "Mileage at which it becomes too expensive: 160000\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Assuming cars.csv is in the same directory and has the correct structure\n",
    "df = pd.read_csv(\"cars.csv\")\n",
    "\n",
    "class Dealership:\n",
    "    def __init__(self, df):\n",
    "        self.title = 'Dealership \\n'\n",
    "        self.df = df\n",
    "        print(self.title)\n",
    "\n",
    "class SearchingAlg:\n",
    "    def __init__(self, df):\n",
    "        self.df = df\n",
    "        self.make = df['Make']\n",
    "        self.brand = df['Brand']\n",
    "        self.mileage = df['Mileatex'] # Corrected column name\n",
    "        self.price = df['Price']\n",
    "\n",
    "    def user_input(self):\n",
    "        print(\"What are you searching for?\")\n",
    "        geo = input(\"Enter the make of the car: \").lower()\n",
    "\n",
    "        matching_rows = self.df[self.df['Make'].str.contains(geo, case = False)]\n",
    "\n",
    "        if len(matching_rows) > 0:\n",
    "            makes = matching_rows['Make'].unique()\n",
    "\n",
    "            if len(makes) == 1:\n",
    "                make = makes[0]\n",
    "                brands = matching_rows[matching_rows['Make'] == make]['Brand'].unique()\n",
    "                print(f\"The brands available for {make} are:\")\n",
    "                print(\", \".join(brands.tolist()))\n",
    "\n",
    "                self.select_brand(make,brands)\n",
    "            else:\n",
    "                print(\"Please specify the make:\")\n",
    "                for make in makes:\n",
    "                    print(make)\n",
    "        else:\n",
    "            print(\"No matches found for the entered make.\")\n",
    "\n",
    "    def select_brand(self, make, brands):\n",
    "        print(\"Choose a brand:\")\n",
    "        for index, brand in enumerate(brands):\n",
    "            print(f\"{index + 1}. {brand}\")\n",
    "\n",
    "        choice = input(\"Enter the number corresponding to your choice: \")\n",
    "        try:\n",
    "            choice_index = int(choice) - 1\n",
    "            if 0 <= choice_index < len(brands):\n",
    "                selected_brand = brands[choice_index]\n",
    "                brand_info = self.df[(self.df['Make'] == make) & (self.df['Brand'] == selected_brand)]\n",
    "                if not brand_info.empty:\n",
    "                    print(f\"Price: {brand_info['Price'].values[0]}\")\n",
    "                    print(f\"Mileage at which it becomes too expensive to have: {brand_info['Mileatex'].values[0]}\")\n",
    "                else:\n",
    "                    print(\"Brand information not found.\")\n",
    "            else:\n",
    "                print(\"Invalid choice.\")\n",
    "        except ValueError:\n",
    "            print(\"Invalid input. Please enter a number.\")\n",
    "\n",
    "# Create instances of the classes\n",
    "trying = Dealership(df)\n",
    "search_alg = SearchingAlg(df)\n",
    "\n",
    "# Call the user_input method\n",
    "search_alg.user_input()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "e59a22dd-831e-4d14-bff4-a071b378e667",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the path to the CSV file:  cars.csv\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dealership \n",
      "\n",
      "What are you searching for?\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the make of the car:  nissan\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The brands available for Nissan are:\n",
      "Altima, Sentra\n",
      "Choose a brand:\n",
      "1. Altima\n",
      "2. Sentra\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the number corresponding to your choice:  2\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Price: 8500\n",
      "Mileage at which it becomes a high-risk purchase: 140000\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import os\n",
    "\n",
    "class Dealership:\n",
    "    def __init__(self, df):\n",
    "        self.title = 'Dealership \\n'\n",
    "        self.df = df\n",
    "        print(self.title)\n",
    "\n",
    "class SearchingAlg:\n",
    "    def __init__(self, df):\n",
    "        self.df = df\n",
    "        self.make = df['Make']\n",
    "        self.brand = df['Brand']\n",
    "        self.mileage = df['Mileatex'] # Corrected column name\n",
    "        self.price = df['Price']\n",
    "\n",
    "    def user_input(self):\n",
    "        print(\"What are you searching for?\")\n",
    "        geo = input(\"Enter the make of the car: \").lower()\n",
    "\n",
    "        matching_rows = self.df[self.df['Make'].str.contains(geo, case = False)]\n",
    "\n",
    "        if len(matching_rows) > 0:\n",
    "            makes = matching_rows['Make'].unique()\n",
    "\n",
    "            if len(makes) == 1:\n",
    "                make = makes[0]\n",
    "                brands = matching_rows[matching_rows['Make'] == make]['Brand'].unique()\n",
    "                print(f\"The brands available for {make} are:\")\n",
    "                print(\", \".join(brands.tolist()))\n",
    "\n",
    "                self.select_brand(make,brands)\n",
    "            else:\n",
    "                print(\"Please specify the make:\")\n",
    "                for make in makes:\n",
    "                    print(make)\n",
    "        else:\n",
    "            print(\"No matches found for the entered make.\")\n",
    "\n",
    "    def select_brand(self, make, brands):\n",
    "        print(\"Choose a brand:\")\n",
    "        for index, brand in enumerate(brands):\n",
    "            print(f\"{index + 1}. {brand}\")\n",
    "\n",
    "        choice = input(\"Enter the number corresponding to your choice: \")\n",
    "        try:\n",
    "            choice_index = int(choice) - 1\n",
    "            if 0 <= choice_index < len(brands):\n",
    "                selected_brand = brands[choice_index]\n",
    "                brand_info = self.df[(self.df['Make'] == make) & (self.df['Brand'] == selected_brand)]\n",
    "                if not brand_info.empty:\n",
    "                    print(f\"Price: {brand_info['Price'].values[0]}\")\n",
    "                    print(f\"Mileage at which it becomes a high-risk purchase: {brand_info['Mileatex'].values[0]}\")\n",
    "                else:\n",
    "                    print(\"Brand information not found.\")\n",
    "            else:\n",
    "                print(\"Invalid choice.\")\n",
    "        except ValueError:\n",
    "            print(\"Invalid input. Please enter a number.\")\n",
    "\n",
    "def main():\n",
    "    file_path = input(\"Enter the path to the CSV file: \")\n",
    "    if os.path.exists(file_path):\n",
    "        df = pd.read_csv(file_path)\n",
    "        trying = Dealership(df)\n",
    "        search_alg = SearchingAlg(df)\n",
    "        search_alg.user_input()\n",
    "    else:\n",
    "        print(\"File not found. Please provide a valid file path.\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fbb4c547-5fc1-4dd4-bb12-deac737534e5",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
